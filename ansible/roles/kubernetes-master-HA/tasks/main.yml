- name: copy kubeadm config file
  template:
    src: kubeadm-config.yml
    dest: /etc/kubernetes/kubeadm-config.yml


- name: check if a kubernetes master
  stat:
    path: /etc/kubernetes/manifests/kube-scheduler.yaml
  register: stat_master


- name: check if in kubernetes cluster
  stat:
    path: /etc/kubernetes/kubelet.conf
  register: stat_in_cluster


- name: copy cert files that were generated on primary-master
  copy:
    src: "certs-fetched-from-primary-master/{{ item }}"
    dest: "/etc/kubernetes/pki/{{ item }}"
  with_items:
    - ca.crt
    - ca.key
    - sa.key
    - sa.pub
  when: (cluster_mode == 'secondary-master')


- name: create kubernetes cluster
  shell: kubeadm init --config /etc/kubernetes/kubeadm-config.yml
  when: (stat_master.stat.exists == False) and (stat_in_cluster.stat.exists == False)


- name: fetch generated certs files from primary, to store on local machine, to then use for provisioning secondary masters
  fetch:
    src: "/etc/kubernetes/pki/{{item}}"
    dest: "{{role_path}}/files/certs-fetched-from-primary-master/"
    flat: yes
  with_items:
    - ca.crt
    - ca.key
    - sa.key
    - sa.pub
  when: (cluster_mode == 'primary-master')


- name: add KUBECONFIG environment variable to root user bashrc
  lineinfile:
    dest: /root/.bashrc
    regexp: "^export KUBECONFIG="
    line: "export KUBECONFIG=/etc/kubernetes/admin.conf"
    state: present
    create: yes


- name: enable flannel CDR networking (only run when cluster is first created)
  shell: export KUBECONFIG=/etc/kubernetes/admin.conf && kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.9.1/Documentation/kube-flannel.yml
  when: (stat_master.stat.exists == False) and (stat_in_cluster.stat.exists == False)


# FIXME: this generates a new join token every run - need to find a way to run only on demand...
- name: generate cluster join token
  command: "kubeadm token create --print-join-command"
  register: join_command

- name: store join_command in ansible fact so it can be used by nodes to join cluster
  set_fact:
    kube_cluster_join_command: "{{join_command.stdout}}"


# - name: configure kubelet config to use AWS LB (looks like this should only be configured on worker nodes...)
#   lineinfile:
#     dest: /etc/kubernetes/kubelet.conf
#     regexp: "^    server: https"
#     line: "    server: https://{{ aws_lp_ipaddress }}:6443"
#     state: present
#   notify:
#     - restart kubelet
